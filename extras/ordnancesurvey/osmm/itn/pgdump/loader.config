# The directory containing source data All .gml / .gz files in the specified
# directory and it's descendants will be loaded.
src_dir=/path/to/source/folder

# The output directory is specified in ogr_cmd as the location to write the SQL
# files to.
out_dir=/path/to/output/folder

# The directory used to store temporary working files
# during loading.
tmp_dir=/path/to/temp/folder

# Use the PGDump driver which will output a SQL file to disk.
# Don't create schema, tables or indexes at this point as we will do that
# manually but specify the schema so that the SQL files include the appropriate
# schema. The PG_LIST_ALL_TABLES config is important for ITN as not all tables
# have geometry and therefore do not appear in the geometry_columns table
ogr_cmd=ogr2ogr --config PG_USE_COPY YES --config PG_LIST_ALL_TABLES YES --config GML_EXPOSE_FID NO -skipfailures -lco spatial_index=off -lco create_table=off -lco schema=osmm_itn -lco create_schema=off -f PGDump $output_dir/$base_file_name.sql $file_path

# Use the OSMM ITN prep class which exposes references between the feature
# types and formats dateTimeQualifier values
prep_cmd=python prepgml4ogr.py $file_path prep_osgml.prep_osmm_itn

# Once ogr2ogr has created the SQL from the source GML load the SQL file using
# the command line PostgreSQL client psql
post_cmd=psql -U postgres -d postgis -h localhost -f $output_dir/$base_file_name.sql

gfs_file=../gfs/osmm_itn_postgres.gfs

debug=False
