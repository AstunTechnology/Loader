## Loader. Copyright (c) Astun Technology Ltd. (http://astuntechnology.com).
## Licensed under [MIT License](https://git.io/fAxH0).

# The directory containing your source files. All supported files in the
# specified directory and it's descendants will be loaded.
src_dir=/path/to/source/data/folder

# Temporary SQL files will be written here
out_dir=/path/to/output/data/folder

# The directory used to store temporary working files during loading.
tmp_dir=/path/to/temp/folder

# Use the OGR PGDump driver using COPY for speed. The PGDump driver does not
# load into the database itself but instead creates a SQL file which we later
# load with the post_cmd
ogr_cmd=ogr2ogr --config PG_USE_COPY YES --config GML_EXPOSE_FID NO -skipfailures -lco spatial_index=off -lco create_table=off -lco schema=vml -lco create_schema=off -f PGDump $output_dir/$base_file_name.sql $file_path

# Use the standard preparation logic for VML
prep_cmd=python prepgml4ogr.py $file_path prep_osgml.prep_vml

# Use the standard OGR GFS file for VML loaded into Postgres to define the
# tables and their attributes. The tables and attributes defined in the GFS
# file must match the SQL in create-tables.sql and create-indexes.sql.
gfs_file=../gfs/vml_postgres.gfs

# Load the generated SQL file using the Postgres command-line client psql
post_cmd=psql -d postgis -U postgres -f $output_dir/$base_file_name.sql
