# The directory containing your source OS MasterMap
# .gml or .gz files. All .gml / .gz files in the
# specified directory and it's decendents will be loaded.
src_dir=/path/to/source/data/folder

# The directory used to store temporary working files
# during loading.
tmp_dir=/path/to/temp/folder

# The ogr2ogr command that will be used to load the data.
# Here you can specify the destination format and any
# associated settings (for example database connection
# details if you are writing to PostGIS).
#
# Example of using PGDump format which will create SQL files
# ready to load via psql.
#
# The chosen options assume that the tables already exist,
# COPY is used in favor of INSERT statements and no attempt
# is made to create a spatial index for improved load performance.
#
# *Notes*
#
# If you want to avoid (no fatal) error messages when loading the
# SQL dump files then you need GDAL >= 1.8.1 in order to use the
# create_schema layer creation option (-lco create_schema=off).
#
# The path /path/to/output/ needs to be set to the directory
# that the SQL dump files should be written to.
#
# Further details of the PGDump driver: http://www.gdal.org/ogr/drv_pgdump.html
#
ogr_cmd=ogr2ogr --config PG_USE_COPY YES -skipfailures -lco spatial_index=off -lco create_table=off -lco schema=osmm -lco create_schema=off -f PGDump /path/to/output/$base_file_name.sql $file_path

#### Advanced configuration ####

# The command used to prepare the source
# data so it is suitable for loading with OGR
# (does not normally need changing).
prep_cmd=python preposmm4ogr.py $file_path

# Optional OGR .gfs file used to define the
# feature attributes and geometry type of
# the feautes read from the GML.
gfs_file=osmm_topo.gfs

# Whether to output debug messages and keep
# temporary files (True or False)
debug=True
